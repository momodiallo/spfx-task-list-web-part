{"version":3,"sources":["webparts/taskList/TaskListWebPart.ts"],"names":[],"mappings":"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","file":"webparts/taskList/TaskListWebPart.js","sourcesContent":["import * as ko from 'knockout';\r\nimport { Version } from '@microsoft/sp-core-library';\r\nimport pnp from 'sp-pnp-js';\r\nimport {\r\n  BaseClientSideWebPart,\r\n  IPropertyPaneConfiguration,\r\n  PropertyPaneTextField,\r\n  PropertyPaneLabel,\r\n  PropertyPaneDropdown,\r\n  IPropertyPaneDropdownOption,\r\n  PropertyPaneButton,\r\n  IPropertyPaneButtonProps,\r\n  PropertyPaneButtonType\r\n} from '@microsoft/sp-webpart-base';\r\n\r\nimport * as strings from 'TaskListWebPartStrings';\r\nimport TaskListViewModel, { ITaskListBindingContext } from './TaskListViewModel';\r\nimport { SPHttpClient, SPHttpClientResponse } from '@microsoft/sp-http';\r\n\r\nlet _instance: number = 0;\r\n\r\nexport interface ITaskListWebPartProps {\r\n  listTitle: string;\r\n  listViewName: string;\r\n  viewMode: string;\r\n  applyButton: any;\r\n  context: any;\r\n}\r\n\r\nexport default class TaskListWebPart extends BaseClientSideWebPart<ITaskListWebPartProps> {\r\n  private _id: number;\r\n  private _componentElement: HTMLElement;\r\n  private _koListTitle: KnockoutObservable<string> = ko.observable('');\r\n  private _koListViewName: KnockoutObservable<string> = ko.observable('');\r\n\r\n  private taskLists: IPropertyPaneDropdownOption[];\r\n  private taskListsDropdownDisabled: boolean = true;\r\n  private listViews: IPropertyPaneDropdownOption[];\r\n  private listViewMode: IPropertyPaneDropdownOption[] = [{key: 0, text: \"Light Mode\"}, {key: 1, text: \"Dark Mode\"}];\r\n  private listViewDropdownDisabled: boolean = true;\r\n\r\n  private ApplyChanges():void{     \r\n    location.reload();\r\n  }\r\n\r\n  private loadLists(): Promise<IPropertyPaneDropdownOption[]> {    \r\n    return this.context.spHttpClient.get(this.context.pageContext.web.absoluteUrl + `/_api/web/lists?$filter=Hidden eq false and BaseTemplate  eq 171`, SPHttpClient.configurations.v1) // sending the request to SharePoint REST API\r\n    .then((response: SPHttpClientResponse) => { // httpClient.get method returns a response object where json method creates a Promise of getting result\r\n      return response.json();\r\n    }).then((response: any) => { // response is an ISPLists object  \r\n      var asd = [];\r\n      var bsd = response.value;\r\n      bsd.forEach(e => {\r\n        asd.push({ key: e.Id.toString(), text: e.Title.toString() });\r\n      });\r\n     // this.listDropDownOptions.push({ key: e.Id.toString(), text: e.Title.toString() });\r\n      return asd; \r\n    });\r\n }\r\n\r\n   // ...\r\n   private loadItems(): Promise<IPropertyPaneDropdownOption[]> {\r\n    const wp: TaskListWebPart = this;\r\n    if (!this.properties.listTitle) {\r\n      // resolve to empty options since no list has been selected\r\n      return Promise.resolve();\r\n    }      \r\n   else {\r\n    var listId = this.properties.listTitle;\r\n    return this.context.spHttpClient.get(this.context.pageContext.web.absoluteUrl + '/_api/web/lists(guid\\'' + listId + '\\')/views', SPHttpClient.configurations.v1) // requesting views from SharePoint REST API\r\n      .then((response: SPHttpClientResponse) => { // httpClient.get method returns a response object where json method creates a Promise of getting result\r\n        return response.json();\r\n      })\r\n      .then((response: any) => { // response is an ISPViews object        \r\n        var _asd = [];\r\n        var _bsd = response.value;\r\n        _bsd.forEach(e => {\r\n          _asd.push({ key: e.Id.toString(), text: e.Title.toString() });\r\n        });\r\n       // this.listDropDownOptions.push({ key: e.Id.toString(), text: e.Title.toString() });\r\n        return _asd; \r\n      });\r\n    }\r\n  }\r\n\r\n  // ...\r\n  protected onPropertyPaneConfigurationStart(): void {\r\n    this.taskListsDropdownDisabled = !this.taskLists;\r\n    this.listViewDropdownDisabled = !this.properties.listTitle || !this.listViews;\r\n\r\n    if (this.taskLists) {\r\n      return;\r\n    }\r\n\r\n    //this.context.statusRenderer.displayLoadingIndicator(this.domElement, 'options');\r\n    \r\n    this.loadLists()\r\n      .then((listOptions: IPropertyPaneDropdownOption[]): Promise<IPropertyPaneDropdownOption[]> => {\r\n        this.taskLists = listOptions;\r\n        this.taskListsDropdownDisabled = false;\r\n        this.context.propertyPane.refresh();\r\n        return this.loadItems();\r\n      })\r\n      .then((itemOptions: IPropertyPaneDropdownOption[]): void => {\r\n        this.listViews = itemOptions;\r\n        this.listViewDropdownDisabled = !this.properties.listTitle;\r\n        this.context.propertyPane.refresh();\r\n        this.context.statusRenderer.clearLoadingIndicator(this.domElement);\r\n        this.render();\r\n      });\r\n  }\r\n  // ...\r\n\r\n  // ...\r\n  protected onPropertyPaneFieldChanged(propertyPath: string, oldValue: any, newValue: any): void {\r\n    if (propertyPath === 'listTitle' && newValue) {\r\n      // push new list value\r\n      super.onPropertyPaneFieldChanged(propertyPath, oldValue, newValue);\r\n      // get previously selected item\r\n      const previousItem: string = this.properties.listViewName;\r\n      // reset selected item\r\n      this.properties.listViewName = undefined;\r\n      // push new item value\r\n      this.onPropertyPaneFieldChanged('listViewName', previousItem, this.properties.listViewName);\r\n      // disable item selector until new items are loaded\r\n      this.listViewDropdownDisabled = true;\r\n      // refresh the item selector control by repainting the property pane\r\n      this.context.propertyPane.refresh();\r\n      // communicate loading items\r\n      //this.context.statusRenderer.displayLoadingIndicator(this.domElement, 'items');\r\n\r\n      this.loadItems()\r\n        .then((itemOptions: IPropertyPaneDropdownOption[]): void => {\r\n          // store items\r\n          this.listViews = itemOptions;\r\n          // enable item selector\r\n          this.listViewDropdownDisabled = false;\r\n          // clear status indicator\r\n          this.context.statusRenderer.clearLoadingIndicator(this.domElement);\r\n          // re-render the web part as clearing the loading indicator removes the web part body\r\n          this.render();\r\n          // refresh the item selector control by repainting the property pane\r\n          this.context.propertyPane.refresh();          \r\n        });\r\n    }\r\n    else {\r\n      super.onPropertyPaneFieldChanged(propertyPath, oldValue, newValue);\r\n    }\r\n  }\r\n  // ...\r\n\r\n  /**\r\n   * Shouter is used to communicate between web part and view model.\r\n   */\r\n  private _shouter: KnockoutSubscribable<{}> = new ko.subscribable();\r\n  private _self = this;\r\n\r\n  /**\r\n   * Initialize the web part.\r\n   */\r\n  protected onInit(): Promise<void> {\r\n    console.log('Oninit');\r\n    this._id = _instance++;\r\n\r\n    const tagName: string = `ComponentElement-${this._id}`;\r\n    this._componentElement = this._createComponentElement(tagName);\r\n    this._registerComponent(tagName);\r\n\r\n    // When web part description is changed, notify view model to update.   \r\n    this._koListTitle.subscribe((newValue: string) => {\r\n      this._shouter.notifySubscribers(newValue, 'listTitle');\r\n    });\r\n    this._koListViewName.subscribe((newValue: string) => {\r\n      this._shouter.notifySubscribers(newValue, 'listViewName');\r\n    });\r\n\r\n    const bindings: ITaskListBindingContext = {      \r\n      listTitle: this.properties.listTitle,\r\n      listViewName: this.properties.listViewName,\r\n      viewMode: this.properties.viewMode,\r\n      applyButton: this.properties.applyButton,\r\n      shouter: this._shouter,\r\n      context: this.context\r\n    };\r\n\r\n    ko.applyBindings(bindings, this._componentElement);\r\n\r\n    return super.onInit().then(_ => {\r\n      pnp.setup({\r\n        spfxContext: this.context\r\n      });\r\n    });\r\n  }\r\n\r\n  public render(): void {\r\n    if (!this.renderedOnce) {\r\n      this.domElement.appendChild(this._componentElement);\r\n    }\r\n\r\n    this._koListTitle(this.properties.listTitle);\r\n    this._koListViewName(this.properties.listViewName);  \r\n  }\r\n\r\n  private _createComponentElement(tagName: string): HTMLElement {\r\n    const componentElement: HTMLElement = document.createElement('div');\r\n    componentElement.setAttribute('data-bind', `component: { name: \"${tagName}\", params: $data }`);\r\n    return componentElement;\r\n  }\r\n\r\n  private _registerComponent(tagName: string): void {\r\n    ko.components.register(\r\n      tagName,\r\n      {\r\n        viewModel: TaskListViewModel,\r\n        template: this.properties.viewMode ? require('./TaskListDark.template.html') : require('./TaskListLight.template.html'),\r\n        synchronous: false\r\n      }\r\n    );\r\n  }\r\n\r\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\r\n    return {\r\n      pages: [\r\n        {\r\n          groups: [\r\n            {\r\n              groupFields: [               \r\n                PropertyPaneLabel('labelField', {\r\n                  text: 'Please select List and List view'\r\n                }),\r\n                PropertyPaneDropdown('listTitle', {\r\n                  label: 'Select the task list',\r\n                  options: this.taskLists,\r\n                  disabled: this.taskListsDropdownDisabled\r\n                }),               \r\n                PropertyPaneDropdown('listViewName', {\r\n                  label: 'Select the task list view',\r\n                  options: this.listViews,\r\n                  disabled: this.listViewDropdownDisabled\r\n                }),\r\n                PropertyPaneDropdown('viewMode', {\r\n                  label: 'Select the appearance',\r\n                  options: this.listViewMode,\r\n                  selectedKey: 0\r\n                }),\r\n                PropertyPaneButton('applyButton', {\r\n                  text: 'Apply',\r\n                  disabled: false,\r\n                  buttonType: PropertyPaneButtonType.Hero,\r\n                  onClick: this.ApplyChanges\r\n                })\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}